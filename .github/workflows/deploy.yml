name: Flask CI/CD to EC2

on: [push]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black

    # - name: Lint
    #   run: |
    #     flake8 .
    #     black --check .

    - name: Test
      continue-on-error: true
      run: |
        pytest --cov=./ --cov-report=xml --junitxml=test-results.xml --continue-on-collection-errors -v

    - name: Upload coverage
      uses: codecov/codecov-action@v3

    - name: Test Summary
      run: |
        echo "### 🧪 Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Case | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|" >> $GITHUB_STEP_SUMMARY
        
        # Parse test cases and failures properly
        while read -r line; do
          if [[ $line == *"<testcase "* ]]; then
            name=$(echo "$line" | sed -n 's/.*name="\([^"]*\)".*/\1/p')
            if [[ $line == *"<failure"* ]]; then
              echo "| $name | ❌ Failed |" >> $GITHUB_STEP_SUMMARY
            else
              echo "| $name | ✅ Passed |" >> $GITHUB_STEP_SUMMARY
            fi
          fi
        done < <(cat test-results.xml | tr -d '\n' | sed 's/<testcase/\n<testcase/g' | grep '<testcase')
        
        # Get accurate counts
        TOTAL_TESTS=$(grep -o '<testcase' test-results.xml | wc -l)
        FAILED_TESTS=$(grep -o '<failure' test-results.xml | wc -l)
        PASSED_TESTS=$((TOTAL_TESTS - FAILED_TESTS))
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Summary:**" >> $GITHUB_STEP_SUMMARY
        echo "✅ $PASSED_TESTS passed | ❌ $FAILED_TESTS failed | 📊 $TOTAL_TESTS total" >> $GITHUB_STEP_SUMMARY

  # deploy:
  #   needs: build
  #   runs-on: ubuntu-latest
  #   steps:
  #   - uses: actions/checkout@v4
  #   - name: Deploy to EC2
  #     uses: appleboy/scp-action@master
  #     with:
  #       host: ${{ secrets.AWS_EC2_HOST }}
  #       username: ${{ secrets.AWS_EC2_USER }}
  #       key: ${{ secrets.AWS_SSH_KEY }}
  #       source: "./"
  #       target: "/home/ubuntu/flask-app"
  #   - name: Setup and Restart
  #     uses: appleboy/ssh-action@master
  #     with:
  #       host: ${{ secrets.AWS_EC2_HOST }}
  #       username: ${{ secrets.AWS_EC2_USER }}
  #       key: ${{ secrets.AWS_SSH_KEY }}
  #       script: |
  #         sudo apt update -y
  #         sudo apt install -y python3 python3-pip
  #         cd /home/ubuntu/flask-app
  #         pip3 install -r requirements.txt
  #         sudo pkill -f gunicorn || true
  #         nohup gunicorn --bind 0.0.0.0:5000 wsgi:app > /dev/null 2>&1 &
  #   - name: Show URL
  #     run: |
  #       echo "Flask App URL: http://${{ secrets.AWS_EC2_HOST }}:5000"
  #       echo "::notice::Deployed to http://${{ secrets.AWS_EC2_HOST }}:5000"
